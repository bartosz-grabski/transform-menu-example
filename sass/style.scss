$elements: 6;
$radiusX: 300px;
$radiusY: 100px;
$width: 500px;
$pi: 3.14;
$min: 0.3;
$animationTime: 1s;

@function calculate-scale($degree) {
	@debug $degree;
	@return (((1 - $min)/($pi*$pi))*$degree*$degree) + (((2 * $min) - 2)/$pi)*$degree + 1;
}

$pi: 3.14159265359;
$_precision: 10;

@function pow($base, $exp) {
  $value: $base;
  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }
  @if $exp < 1{
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }
  @return $value;
}

@function fact($num) {
  $fact: 1;
  @if $num > 0{
    @for $i from 1 through $num {
      $fact: $fact * $i;
    }
  }
  @return $fact;
}

@function _to_unitless_rad($angle) {
  @if unit($angle) == "deg" {
    $angle: $angle / 180deg * $pi;
  }
  @if unit($angle) == "rad" {
    $angle: $angle / 1rad;
  }
  @return $angle;
}

@function sin($angle){
  $a: _to_unitless_rad($angle);
  $sin: $a;
  @for $n from 1 through $_precision {
    $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
  }
  @return $sin;
}

@function cos($angle){
  $a: _to_unitless_rad($angle);
  $cos: 1;
  @for $n from 1 through $_precision {
    $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
  }
  @return $cos;
}

@function tan($angle){
  @return sin($angle) / cos($angle);
}

body {
	background: #000;
	font-family: 'Open Sans', sans-serif;
}

.menu-entry {
	border : 1px solid #grey;
	border-radius : 10px;
	width : 300px;
	height: 100px;
	background : #fff;
	padding: 15px;

	&.header {
		margin : auto;
	}
}


.container {
	text-align: center;
	margin: auto;
	width : 500px;
	position: relative;

}

.transform-wrapper {
	margin:auto;
	width: 100%;
	height: 500px;
	position: relative;
}

.transform {
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
	margin: auto;
}


@for $i from 0 to $elements {

	.transform-#{$i}-active {
			@for $j from 0 to $elements {

				$degreeRad: ((2*$pi)/$elements) * ($j - $i);

				.transform-#{$j} {
					transform: 
						translateY(-100px * sin(0.5 * abs($degreeRad)))
						translateX($radiusX * sin($degreeRad))
						scale(calculate-scale(abs($degreeRad)), calculate-scale(abs($degreeRad)));
					transition: all $animationTime ease-in;
					opacity: calculate-scale(abs($degreeRad))
				}

				
			}
	}

}


